buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.17"
    }
}

plugins {
    // Like --scan option to gradle; should be placed before any other plugins
    id 'com.gradle.build-scan' version '2.1'

    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.21'

    // Gradle dependency update checker; run by "dependencyUpdates" task
    id "com.github.ben-manes.versions" version "0.20.0"

    // Release version with "gradle release"
    id 'net.researchgate.release' version '2.6.0'

    // Bundle all dependencies into one fat shadowed jar
    // (Gets automatically triggered when application plugin is present)
    id 'com.github.johnrengelman.shadow' version '4.0.4'

    // Publish library at JFrog BinTray
    id "com.jfrog.bintray" version "1.8.1"
}

apply plugin: "maven-publish"
apply plugin: "java-library"
apply plugin: 'org.jetbrains.dokka'


group 'de.debuglevel.omnitrackerdatabasebinding'

repositories {
    jcenter()
}

dependencies {
    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    // Tests
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.4.0'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.4.0'
    testCompile 'org.junit.jupiter:junit-jupiter-params:5.4.0'
    testCompile 'org.assertj:assertj-core:3.12.0'

    // Logging
    // See http://saltnlight5.blogspot.com/2013/08/how-to-configure-slf4j-with-different.html for a quick introduction to slf4j
    implementation 'io.github.microutils:kotlin-logging:1.6.25'
    implementation 'org.slf4j:slf4j-api:1.7.25'
    implementation 'org.slf4j:slf4j-simple:1.7.25'

    // Databases
    implementation group: 'net.sf.ucanaccess', name: 'ucanaccess', version: '4.0.4'
    implementation group: 'com.microsoft.sqlserver', name: 'mssql-jdbc', version: '6.4.0.jre8'

    // Configuration
    implementation 'com.natpryce:konfig:1.6.9.0'
}

// Java configuration
java {
    sourceCompatibility = JavaVersion.VERSION_1_8 // Source is Java 8 code
    targetCompatibility = JavaVersion.VERSION_1_8 // Byte code will be JVM 8
}

// Kotlin configuration (implies compileKotlin and compileTestKotlin)
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8 // Byte code will be JVM 8
    }
}

// Configuration of com.gradle.build-scan plugin
buildScan {
    // Accept the license agreement for com.gradle.build-scan plugin
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'

    // Always publish scan (no more need for --scan option)
    publishAlways()
}

// Configuration of net.researchgate.release plugin
release {
    failOnCommitNeeded = false
    failOnUnversionedFiles = false
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier 'sources'
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = javadoc.destinationDir
    inputs.dir 'src/main/kotlin'
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        javaMaven(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_API_KEY')
    publications = ['javaMaven']
    publish = true
    override = true
    pkg {
        repo = 'maven'
        name = 'omnitrackerdatabasebinding'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/debuglevel/omnitrackerdatabasebinding.git'
    }
}
