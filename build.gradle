buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin"

        // TODO: might be removed when https://hibernate.atlassian.net/browse/HHH-13354 is resolved

        classpath "org.hibernate:hibernate-gradle-plugin:$hibernateGradlePluginVersion"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:0.9.17"
        classpath 'com.vanniktech:gradle-maven-publish-plugin:0.13.0'
    }
}

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm'

    // Kotlin annotations processor (needed by Micronaut)
    id 'org.jetbrains.kotlin.kapt'

    //
    // needed for Bean Validation https://docs.micronaut.io/latest/guide/index.html#beanValidation
    // unsure, if there is another reason for it
    // TODO: configure allopen to only open @Validated classes
    id 'org.jetbrains.kotlin.plugin.allopen'

    // Check updated dependencies with "gradle dependencyUpdates".
    id 'com.github.ben-manes.versions'

    // Release version with "gradle release"
    id 'net.researchgate.release'

    // Create start scripts
    // Is executed on "build" task but not on e.g. "jar" task
    id 'application'

    // Bundle all dependencies into one fat shadowed jar
    // (Gets automatically triggered when application plugin is present)
    //id 'com.github.johnrengelman.shadow'

    // add no-argument constructors as they are needed for JPA (see https://kotlinlang.org/docs/reference/compiler-plugins.html#jpa-support)
    id "org.jetbrains.kotlin.plugin.jpa"

    // Publish library at JFrog BinTray
    id "com.jfrog.bintray" version "1.8.1"
}
// Enhance Hibernate entities (see configuration block below)
// TODO: move to plugins block when https://hibernate.atlassian.net/browse/HHH-13354 is resolved
apply plugin: 'org.hibernate.orm'

apply plugin: "maven-publish"
apply plugin: 'com.vanniktech.maven.publish'
apply plugin: "java-library"
apply plugin: 'org.jetbrains.dokka'

repositories {
    mavenCentral()
//    mavenLocal()
//    maven {
//        url "https://jitpack.io"
//    }
}

dependencies {
    // If no specific version is given, it is usually provided by the Micronaut BOM

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    //implementation "org.jetbrains.kotlin:kotlin-reflect"

    // Tests
    /// JUnit
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.junit.jupiter:junit-jupiter-params"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    /// Mockito
    //testImplementation "org.mockito:mockito-junit-jupiter:$mockitoJunitJupiterVersion"
    /// Assertions
    testImplementation "org.assertj:assertj-core:$assertjVersion"

    // Logging
    // See http://saltnlight5.blogspot.com/2013/08/how-to-configure-slf4j-with-different.html for a quick introduction to slf4j
    implementation "io.github.microutils:kotlin-logging:$kotlinLoggingVersion"
    runtimeOnly "ch.qos.logback:logback-classic:$logbackVersion"

    // Micronaut
    /// Bill of Materials, which defines dependency versions
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    kapt platform("io.micronaut:micronaut-bom:$micronautVersion")
    kaptTest platform("io.micronaut:micronaut-bom:$micronautVersion")
    // Core
    implementation "io.micronaut:micronaut-runtime"
    implementation "javax.annotation:javax.annotation-api"
    //runtimeOnly "com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonModuleKotlinVersion"
    /// Validation
    kapt "io.micronaut:micronaut-validation"
    //implementation 'io.micronaut.configuration:micronaut-hibernate-validator' // if full Bean Validator 2.0 compliance is needed
    /// Server
    //implementation "io.micronaut:micronaut-http-server-netty"
    /// Client
    //implementation "io.micronaut:micronaut-http-client"
    /// Inversion of Control / Dependency Injection
    kapt "io.micronaut:micronaut-inject-java"
    kaptTest "io.micronaut:micronaut-inject-java"
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    /// Management & Monitoring
    /// automatically provides the /health endpoint publicly, and some other with authentication
    //implementation 'io.micronaut:micronaut-management'
    //implementation 'io.micronaut.configuration:micronaut-jmx' // activate JMX for the endpoints
    /// Persistence
    //kapt "io.micronaut.data:micronaut-data-processor"
    //implementation "io.micronaut.data:micronaut-data-hibernate-jpa"
    //runtimeOnly "io.micronaut.configuration:micronaut-jdbc-tomcat"
    //runtimeOnly "com.h2database:h2"
    //testRuntimeOnly "org.hsqldb:hsqldb:$hsqldbVersion"
    //testRuntimeOnly "org.apache.derby:derby:$derbyVersion"
    /// Security
    //kapt "io.micronaut:micronaut-security"
    //implementation "io.micronaut:micronaut-security"
    /// Service registration and discovery
    //implementation "io.micronaut:micronaut-discovery-client"

    // Databases
    implementation "net.sf.ucanaccess:ucanaccess:$ucanaccessVersion"
    implementation group: 'com.microsoft.sqlserver', name: 'mssql-jdbc', version: '6.4.0.jre8'
}



ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')

// Java configuration
java {
    sourceCompatibility = JavaVersion.VERSION_1_8 // Source is Java 8 code
    targetCompatibility = JavaVersion.VERSION_1_8 // Byte code will be JVM 8
}

// Kotlin configuration (implies compileKotlin and compileTestKotlin)
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8 // Byte code will be JVM 8
        // retain parameter names for Java reflection
        javaParameters = true
    }
}

// Configuration of net.researchgate.release plugin
release {
    failOnCommitNeeded = true // changed files are committed automatically
    failOnUnversionedFiles = false // unversioned files are not committed automatically
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
    }

    reports {
        html.enabled = true
    }
}

allOpen {
    annotation("io.micronaut.aop.Around")
}

// enhance Hibernate enities in bytecode
hibernate {
    enhance {
        enableLazyInitialization = true
        enableDirtyTracking = true
        enableAssociationManagement = true
    }
}

// filter out release candidates on dependency update check
dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'b', 'ea', 'pr'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]$qualifier[.\d-+]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

//signing {
//    //println 'Checking for signing credentials...'
//    //if (project.hasProperty('SIGNING_PRIVATE_KEY') && project.hasProperty('SIGNING_PASSWORD')) {
//        println 'Found signing credentials. Signing...'
//        println System.getEnv('SIGNING_PRIVATE_KEY')
//    println System.getEnv('SIGNING_PASSWORD')
//        //useInMemoryPgpKeys(project.getProperty('SIGNING_PRIVATE_KEY'), project.getProperty('SIGNING_PASSWORD'))
//        //useInMemoryPgpKeys(System.getEnv('SIGNING_PRIVATE_KEY'), System.getEnv('SIGNING_PASSWORD'))
//        println 'Used useInMemoryPgpKeys()'
//    //}
//}



//dokka {
//    outputFormat = 'html'
//    outputDirectory = "$buildDir/javadoc"
//}

//task sourcesJar(type: Jar) {
//    from sourceSets.main.allSource
//    classifier 'sources'
//}

//task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
//    outputFormat = 'javadoc'
//    outputDirectory = javadoc.destinationDir
//    inputs.dir 'src/main/kotlin'
//}
//
//task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//}
//
//publishing {
//    publications {
//        javaMaven(MavenPublication) {
//            from components.java
//            artifact sourcesJar
//            artifact javadocJar
//        }
//    }
//}

//bintray {
//    user = System.getenv('BINTRAY_USER')
//    key = System.getenv('BINTRAY_API_KEY')
//    publications = ['javaMaven']
//    publish = true
//    override = true
//    pkg {
//        repo = 'maven'
//        name = 'omnitrackerdatabasebinding'
//        licenses = ['MIT']
//        vcsUrl = 'https://github.com/debuglevel/omnitrackerdatabasebinding.git'
//    }
//}
